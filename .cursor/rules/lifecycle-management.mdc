---
description: 
globs: 
alwaysApply: false
---
# Lifecycle Management Rules

## Mounting Phase

```typescript
# Lifecycle Management Rules

## Mounting Phase

```typescript
onMount(() => {
  // Initialize component state
  // Set up initial styles
  // Add event listeners
  // Create observers
  // Start subscription services
});
```

## Destruction Phase

```typescript
onDestroy(() => {
  // Remove event listeners
  // Clear intervals/timeouts
  // Destroy observers
  // Reset element styles
  // Clean up GSAP animations
  // Unsubscribe from Raf/Resize
});
```

## Page Transitions

```typescript
// Page entrance
onPageIn(async () => {
  // Animate in new state
  await gsap.to(element, { 
    duration: 0.5, 
    opacity: 1,
    y: 0,
    ease: "power2.out"
  });
});

// Page exit (with visibility check)
onPageOut(
  async () => {
    // Animate out current state
    await gsap.to(element, { 
      duration: 0.3, 
      opacity: 0,
      y: -20,
      ease: "power2.in"
    });
  },
  { element } // Only animate if visible
);
```

## Viewport Detection

```typescript
const observer = onView(element, {
  threshold: 0.1,
  rootMargin: "0px",
  autoStart: false,
  once: false,
  callback: ({ isIn }) => {
    if (isIn) {
      // Element entered viewport
      element.classList.add('in-view');
    } else {
      // Element left viewport
      element.classList.remove('in-view');
    }
  },
});

// Start observer in onMount
onMount(() => {
  observer.start();
});
```

## Scroll Tracking

```typescript
const track = onTrack(element, {
  bounds: [0, 1],
  top: "center",
  bottom: "center",
  callback: (value) => {
    // Handle scroll progress (0-1)
    element.style.transform = `translateY(${value * 100}px)`;
    element.style.setProperty('--scroll-progress', value.toString());
  },
});
```

## Subscription Management

```typescript
// Animation frame subscription
const rafUnsubscribe = Raf.add(({ deltaTime, time }) => {
  // Smooth animations
  element.style.transform = `rotate(${time * 50}deg)`;
});

// Resize subscription
const resizeUnsubscribe = Resize.add(({ width, height }) => {
  // Responsive behavior
  element.style.fontSize = width < 768 ? '14px' : '18px';
});

// Clean up subscriptions
onDestroy(() => {
  rafUnsubscribe();
  resizeUnsubscribe();
});
```

## Best Practices

- Always clean up in `onDestroy`
- Use async/await for page transitions
- Use visibility check in `onPageOut` for performance
- Handle edge cases and errors
- Use proper TypeScript types
- Unsubscribe from all services
- Use GSAP for smooth animations
- Test all lifecycle phases
